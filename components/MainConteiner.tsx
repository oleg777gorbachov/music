import Head from "next/head";
import { ReactElement, useCallback, useEffect, useMemo, useState } from "react";
import Image from "next/image";
import s from "../styles/pages/Nav.module.scss";
import { patches } from "../utils/patches";
import A from "./A";
import { useTypedSelector } from "../hooks/useTypedSelector";
import { musicReducer } from "../redux/reducers/musicReducer";
import { useTypedDispatch } from "../hooks/useTypedDispatch";
import getRandomSong from "../utils/firebase/songs/getRandomSong";
import readSong from "../utils/firebase/songs/readSong";
import Player from "./MainComponents/Player";
import { AiFillCloseCircle, AiOutlineMenu } from "react-icons/ai";
import readAllSongs from "../utils/firebase/songs/readAllSongs";
import { songHistoryReducer } from "../redux/reducers/songHistoryReducer";
import getSongArray from "../utils/firebase/songs/getSongArray";
import { songsStoreReducer } from "../redux/reducers/songStoreReducer";

type MainConteinerI = {
  title: string;
  children: ReactElement<any> | string | React.ReactNode;
  image?: string;
  keywords?: string[];
};

type LinkType = {
  path: string;
  text: string;
};

const linksItemsPublic: LinkType[] = [
  {
    path: patches.MARKET,
    text: "Market",
  },
  {
    path: patches.LOGIN,
    text: "Login",
  },
  {
    path: patches.SIGNUP,
    text: "Signup",
  },
];

const linksItemsPrivate: LinkType[] = [
  {
    path: patches.MARKET,
    text: "Market",
  },
  {
    path: patches.MYPROFILE,
    text: "Profile",
  },
];

function MainConteiner(props: MainConteinerI) {
  const [isOpenMenu, setIsOpenMenu] = useState(false);
  const { children, title, keywords, image } = props;
  const { isAuth, songHistory } = useTypedSelector((store) => store.user);
  const { fileURL } = useTypedSelector((store) => store.music);

  const { setSongHistoryAction } = songHistoryReducer.actions;
  const { setSongAction } = musicReducer.actions;
  const { setStoreSongsAction } = songsStoreReducer.actions;

  const dispatch = useTypedDispatch();

  const fetch = useCallback(async () => {
    if (!fileURL) {
      const songId = localStorage.getItem("LastSong");
      if (songId && songId !== "undefined") {
        const song = await readSong(songId);
        if (song)
          dispatch(
            setSongAction({
              ...song,
              listToPlay: "HISTORYSONGS",
              isReset: true,
            })
          );
        else localStorage.setItem("LassSong", "");
      } else {
        const song = await getRandomSong();
        dispatch(
          setSongAction({ ...song, listToPlay: "GLOBALSTORE", isReset: true })
        );
        const songs = await getSongArray();
        if (songs) dispatch(setStoreSongsAction(songs.songs));
      }
    }
  }, [dispatch, fileURL, setSongAction]);

  useEffect(() => {
    const songId = localStorage.getItem("LastSong");
    (async () => {
      if (songId && songId !== "undefined") {
        const songs = await readAllSongs(songHistory);
        dispatch(setSongHistoryAction(songs));
      }
    })();
  }, [songHistory]);

  useEffect(() => {
    fetch();
  }, [fetch]);

  const menuItemsPublic = useMemo(() => {
    return linksItemsPublic.map((e) => (
      <li key={e.path}>
        <A path={e.path} className="a">
          {e.text}
        </A>
      </li>
    ));
  }, []);

  const menuItemsPrivate = useMemo(() => {
    return linksItemsPrivate.map((e) => (
      <li key={e.path}>
        <A path={e.path} className="a">
          {e.text}
        </A>
      </li>
    ));
  }, []);

  const animationStyles = useMemo(() => {
    const styles: React.CSSProperties = {
      backgroundImage: `url(${image})`,
    };
    return styles;
  }, [image]);

  return (
    <>
      <Head>
        <title>{title}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="keywords" content={keywords && "music"} />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <nav>
        <A className={s.logo} path="/">
          <Image src="/logo.png" alt="logo" width={89} height={60} />
          <h3>Musio.io</h3>
        </A>
        <AiOutlineMenu
          className={s.menuMobile}
          onClick={() => setIsOpenMenu((prev) => !prev)}
        />
        <ul className={isOpenMenu ? `${s.menu} ${s.menuOpen}` : s.menu}>
          {isOpenMenu && (
            <AiFillCloseCircle
              className={s.close}
              onClick={() => setIsOpenMenu(false)}
            />
          )}
          {isAuth ? menuItemsPrivate : menuItemsPublic}
        </ul>
      </nav>
      <main>
        <div className={s.animation} style={image ? animationStyles : {}}></div>
        {children}
        <Player />
        <div className={s.fade}></div>
      </main>
    </>
  );
}

export default MainConteiner;
